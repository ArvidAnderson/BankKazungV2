@layout AuthenticationLayout
@page "/authentication/register"
@inject HttpClient http
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage
@using System.ComponentModel.DataAnnotations
@using System.Net
@using BankKazungV2.Client.Components

<PageTitle>Register</PageTitle>

<AuthorizeView Context="Auth">
    <Authorized>
        <AlreadyAuthenticated/>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Small">
            <EditForm Model="@model" OnInvalidSubmit="OnInvalidSubmit" OnValidSubmit="OnValidSubmit">
            <DataAnnotationsValidator/>
                    <!--Alerts -->
                    @if(ValidationAlertState) {
                        <MudAlert Class="mt-4 mb-4" Severity="Severity.Warning" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => ToggleValidationAlert(false))"><ValidationSummary/></MudAlert>
                    }
                    @if(ErrorAlertState)
                    {
                        <MudAlert Class="mt-4 mb-4" Severity="Severity.Error" Variant="Variant.Filled" ShowCloseIcon="true" CloseIconClicked="(() => ToggleErrorAlert(false))">An error occured.</MudAlert>            
                    }
                    <!--Form-->
                    <MudCard Elevation="3">
                        <MudPaper Class="mud-theme-primary">
                            <MudCardHeader>
                                <CardHeaderContent>
                                    <MudText Typo="Typo.h4">Register</MudText>
                                </CardHeaderContent>
                                <CardHeaderActions>
                                    <MudIconButton OnClick="NavigateLogin" Color="Color.Inherit" Size="Size.Large" Icon="@Icons.Material.Filled.Login"/>
                                </CardHeaderActions>
                            </MudCardHeader>
                        </MudPaper>
                        <MudCardContent>
                            <MudTextField Label="First Name" Class="mt-3" @bind-Value="model.FirstName" For="@(() => model.FirstName)"/>
                            <MudTextField Label="Last Name" Class="mt-3" @bind-Value="model.LastName" For="@(() => model.LastName)"/>
                            <MudNumericField Label="Age" Class="mt-3" @bind-Value="model.Age" For="@(() => model.Age)"/>
                            <MudTextField Label="Phone" Class="mt-3" @bind-Value="model.Phone" For="@(() => model.Phone)"/>
                            <MudTextField Label="Email" Class="mt-3" @bind-Value="model.Email" For="@(() => model.Email)"/>
                            <MudTextField Label="Password" Class="mt-3" @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password"/>
                            <MudTextField Label="Repeat Password" Class="mt-3" @bind-Value="model.PasswordMatch" For="@(() => model.PasswordMatch)" InputType="InputType.Password"/>
                        </MudCardContent>
                        <MudCardActions>
                            <MudButton Class="ml-2 p-2" ButtonType="ButtonType.Submit" Color="Color.Primary" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add">Register</MudButton>
                        </MudCardActions>
                    </MudCard>
            </EditForm>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudTheme Theme = new MudTheme();

    RegisterForm model = new RegisterForm();
    bool ValidationAlertState = false;
    bool ErrorAlertState = false;

    public class RegisterForm
    {
        [Required(ErrorMessage = "The First Name field is required.")]
        public string ?FirstName { get; set; }
        [Required(ErrorMessage = "The Last Name field is required.")]
        public string ?LastName { get; set; }
        [Required]
        public int Age { get; set; }
        [Required]
        [EmailAddress(ErrorMessage = "Email adress is not valid.")]
        public string ?Email { get; set; }
        [Required]
        [Phone]
        public string ?Phone { get; set; }
        [Required]
        [StringLength(30, ErrorMessage = "Password must be at least 8 characters long.", MinimumLength = 8)]
        public string ?Password { get; set; }
        [Required(ErrorMessage = "The Password Repeat field is required.")]
        [StringLength(30, ErrorMessage = "Repeat Password must be at least 8 characters long.", MinimumLength = 8)]
        [Compare("Password", ErrorMessage = "Passwords are not matching.")]
        public string ?PasswordMatch { get; set; }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        Console.WriteLine("Valid Submit");
        var TryAuthenticate = await http.PostAsJsonAsync("api/auth/register", model);
        if(TryAuthenticate.StatusCode == HttpStatusCode.OK)
        {
            StateHasChanged();
            NavigationManager.NavigateTo("/authentication/login");
        } else
        {
            ToggleErrorAlert(true);   
        }
    }

    private void OnInvalidSubmit(EditContext context)
    {
        Console.WriteLine("Invalid Submit");
        ToggleValidationAlert(true);
    }

    private void ToggleValidationAlert(bool newState) {
        ValidationAlertState = newState;
    }

    private void ToggleErrorAlert(bool newState)
    {
        ErrorAlertState = newState;
    }

    private void NavigateLogin()
    {
        NavigationManager.NavigateTo("/authentication/login");
    }

}