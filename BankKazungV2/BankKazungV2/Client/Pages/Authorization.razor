@page "/authorize"
@using BankKazungV2.Shared.DataTransferObjects
@using System.Net
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject ILocalStorageService LocalStorage

<AuthorizeView Context="Auth">
    <Authorized>
        <h1>You are already authorized as @Auth.User.Identity.Name</h1>
    </Authorized>
    <NotAuthorized>
        <h3>Authorization</h3>

        <div class="card">
            <div class="card-header">
                <ul class="nav nav-tabs card-header-tabs">
                    <li @onclick="(() => setSelectedView(1))" class="nav-item">
                        <a class="nav-link active">Login</a>
                    </li>
                    <li @onclick="(() => setSelectedView(2))" class="nav-item">
                        <a class="nav-link">Register</a>
                    </li>
                </ul>
            </div>
            <div class="card-body">
                @if(selectedView == "Login")
                {
                    <EditForm Model="loginUser" OnSubmit="HandleLogin">
                        <div class="form-group">
                            <label for="Email">Email</label>
                            <InputText class="form-control" id="Email" @bind-Value="loginUser.Email"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="Password">Password</label>
                            <InputText type="password" class="form-control" id="Password" @bind-Value="loginUser.Password"></InputText>
                        </div>
                        <div class="form-group mt-1">
                            <button class="btn btn-primary" type="submit">Login</button>
                        </div>
                    </EditForm>
                }
                @if(selectedView == "Register")
                {
                    <EditForm Model="registerUser" OnSubmit="HandleRegister">
                        <div class="form-group">
                            <label for="FirstName">First Name</label>
                            <InputText class="form-control" id="FirstName" @bind-Value="registerUser.FirstName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="LastName">Last Name</label>
                            <InputText class="form-control" id="LastName" @bind-Value="registerUser.LastName"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="Email">Email</label>
                            <InputText class="form-control" id="Email" @bind-Value="registerUser.Email"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="Phone">Phone</label>
                            <InputText class="form-control" id="Phone" @bind-Value="registerUser.Phone"></InputText>
                        </div>
                        <div class="form-group">
                            <label for="Age">Age</label>
                            <InputNumber class="form-control" id="Age" @bind-Value="registerUser.Age"></InputNumber>
                        </div>
                        <div class="form-group">
                            <label for="Password">Password</label>
                            <InputText type="password" class="form-control" id="Password" @bind-Value="loginUser.Password"></InputText>
                        </div>
                        <div class="form-group mt-1">
                            <button class="btn btn-primary" type="submit">Register</button>
                        </div>
                    </EditForm>
                }
            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>


@code {
    UserLogin loginUser = new UserLogin();
    UserRegister registerUser = new UserRegister();

    private string selectedView = "Login";

    private async Task HandleLogin()
    {
        var result = await Http.PostAsJsonAsync("api/Auth/login", loginUser);
        if(result.StatusCode == HttpStatusCode.OK)
        {
            var token = await result.Content.ReadAsStringAsync();
            await LocalStorage.SetItemAsync("token", token);
            await AuthStateProvider.GetAuthenticationStateAsync(); 
        } else
        {
            Console.WriteLine("Wrong Credentials");
        }
    }

    private async Task HandleRegister()
    {
        var result = await Http.PostAsJsonAsync("api/Auth/register", registerUser);
        if(result.StatusCode == HttpStatusCode.OK)
        {
            registerUser = new UserRegister();
            setSelectedView(1);
        }
    }

    private void setSelectedView(int _view)
    {
        switch(_view)
        {
            case 1:
                selectedView = "Login";
                break;
            case 2:
                selectedView = "Register";
                break;
        }
        
    }
}
